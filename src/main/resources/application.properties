server.port=8081
server.servlet.context-path=/api

spring.application.name=springboot-keycloak
#Configura la URL del servidor de Keycloak donde se emiten los tokens JWT. En este caso, se establece en "http://localhost:8080/realms/SpringBootKeycloak".
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/SpringBootKeycloak

# Establece la URL donde se obtienen los conjuntos de claves JWK (JSON Web Key) para verificar la validez de los tokens JWT. En este caso,
# se construye utilizando la URL del emisor anterior y se agrega "/protocol/openid-connect/certs".
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

# Establece el identificador de recurso para el cliente de Keycloak. Esto se utiliza para que spring pueda
# validar que los tokens JWT están destinados a este cliente específico.
jwt.auth.converter.resource-id=springboot-keycloak-client

#Establece el atributo principal que se utilizará para el nombre de usuario preferido en el token JWT.
# Esto indica cómo se obtendrá el nombre de usuario del token JWT.
jwt.auth.converter.principal-attribute=preferred_username


# Esto mostrará mensajes detallados de depuración relacionados con la seguridad en los registros de la aplicación.
# Puede ser útil para diagnosticar problemas relacionados con la autenticación y autorización.
logging.level.org.springframework.security=DEBUG


